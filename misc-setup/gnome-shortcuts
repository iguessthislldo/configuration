#!/usr/bin/env python3

import sys
import subprocess
import json


keys_schema = ('org', 'gnome', 'settings-daemon', 'plugins', 'media-keys')
keybinding = 'custom-keybinding'
keybindings = keybinding + 's'
def shortcut_cmd(key, extra_schema=None, path='', value=None):
    cmd = ['gsettings', 'get' if value is None else 'set']
    schema = keys_schema
    if extra_schema:
        schema += extra_schema
    schema = '.'.join(schema)
    if path:
        schema += ':' + path
    cmd.extend([schema, key])
    if value is not None:
        cmd.append(json.dumps(value))
    print(' '.join(cmd))
    if value is None:
        return json.loads(subprocess.check_output(cmd)
            .decode('utf-8').strip().removeprefix('@as ').replace("'", '"'))
    return subprocess.check_call(cmd)


def add_shortcut(desc, binding, command):
    binding = ''.join(binding)
    shortcuts = shortcut_cmd(keybindings)
    for shortcut in shortcuts:
        other_binding = shortcut_cmd('binding', (keybinding,), shortcut)
        if binding == other_binding:
            other_desc = shortcut_cmd('name', (keybinding,), shortcut)
            other_command = shortcut_cmd('command', (keybinding,), shortcut)
            if desc == other_desc and command == other_command:
                return
            sys.exit(f'"{desc}" conflicts with with existing "{other_desc}": {binding}')
    n = 0
    while True:
        path = '/' + '/'.join(keys_schema + (keybindings, f'custom{n}')) + '/'
        if path in shortcuts:
            n += 1
        else:
            break
    print(path)
    if path not in shortcuts:
        shortcuts.append(path)
        shortcut_cmd(keybindings, value=shortcuts)
    shortcut_cmd('name', (keybinding,), path, desc)
    shortcut_cmd('binding', (keybinding,), path, binding)
    shortcut_cmd('command', (keybinding,), path, command)


ctrl_key = '<Primary>'
alt_key = '<Alt>'
super_key = '<Super>'


cgd = '/data/configuration/bin/control-gnome-displays'
keys = [ctrl_key, alt_key, super_key]

rotate_shortcuts = (
    ('up', 'up'),
    ('down', 'down'),
    ('right', 'to the right'),
    ('left', 'to the left'),
)
for name, desc in rotate_shortcuts:
    add_shortcut(f'Rotate second display {desc}',
        keys + [name.capitalize()], f'{cgd} --display 1 --{name}')

add_shortcut('Restore main display',
    keys + ['r'], f'{cgd} --display 0 --load normal --permanent')
