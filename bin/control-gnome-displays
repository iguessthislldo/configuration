#!/usr/bin/env python3

import sys
import time
import argparse
import json
import dataclasses
import typing
from inspect import signature, ismethod
from pathlib import Path

import dbus


def header(level, *args, sep=' ', l=80):
    fill = ['=', '-', '.'][level]
    title = sep.join(args)
    print(title, fill * (l - 1 - len(title)))


def get_prop(props, name, default):
    return type(default)(props[name]) if name in props else default


class DataClassHelper:
    @staticmethod
    def cast(v, t):
        try:
            return v if type(v) is t else t(v)
        except:
            print(f'Extra info: value is {repr(v)} and type is {t}', file=sys.stderr)
            raise

    @classmethod
    def normalize(cls, value, anno_type):
        if isinstance(value, dict) and issubclass(anno_type, DataClassHelper):
            return anno_type(**value)
        raw_type = typing.get_origin(anno_type)
        if raw_type is list:
            cast_types = typing.get_args(anno_type)
            assert len(cast_types) == 1
            return [cls.normalize(i, cast_types[0]) for i in value]
        elif raw_type is dict:
            cast_types = typing.get_args(anno_type)
            assert len(cast_types) == 2
            key_type, value_type = cast_types
            return {cls.normalize(k, key_type): cls.normalize(v, value_type) for k, v in value.items()}
        cast_types = typing.get_args(anno_type)
        assert len(cast_types) == 0
        return cls.cast(value, anno_type)

    def __post_init__(self):
        for field in dataclasses.fields(self):
            setattr(self, field.name, self.normalize(getattr(self, field.name), field.type))

    def replace(self, other, **kw):
        for field in dataclasses.fields(self):
            n = field.name
            setattr(self, n, kw[n] if n in kw else getattr(other, n))

    def as_tuple(self, cls=None):
        return tuple([getattr(self, field.name)
            for field in dataclasses.fields(self if cls is None else cls)])

    def get_encodable(self, enc):
        d = {}
        for field in dataclasses.fields(self):
            value = getattr(self, field.name)
            d[field.name] = enc.default(value)
        return d

    @classmethod
    def from_json(cls, json_str):
        return cls.normalize(json.loads(json_str), cls)


class OurJsonEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, DataClassHelper):
            return o.get_encodable(self)
        elif isinstance(o, (int, float, str, list, dict)):
            return o
        return super().default(o)


def to_json(obj, **kw):
    return json.dumps(obj, cls=OurJsonEncoder, **kw)


@dataclasses.dataclass
class Mode(DataClassHelper):
    mode_id: str
    w: int
    h: int
    refresh: float
    preferred_scale: float
    supported_scales: list[float]

    def __str__(self):
        return f'{self.w}x{self.h}@{self.refresh:.5}'


@dataclasses.dataclass
class MonitorUniqueId(DataClassHelper):
    connector: str
    vendor: str
    product: str
    serial: str

    def unique_id(self):
        return self.as_tuple(cls=MonitorUniqueId)

    def __str__(self):
        uid = self.unique_id()
        return uid[0] + ': ' + ' '.join(uid[1:])


@dataclasses.dataclass
class Monitor(MonitorUniqueId):
    modes: dict[str, Mode]
    current_mode_id: str
    preferred_mode_id: str

    def current_mode(self):
        return self.modes[self.current_mode_id]

    def preferred_mode(self):
        return self.modes[self.preferred_mode_id]

    def __str__(self):
        mode = self.current_mode()
        return f'{self.connector} {mode}'


@dataclasses.dataclass
class SavedMonitor(MonitorUniqueId):
    mode_id: str

    @classmethod
    def from_monitor(cls, monitor):
        return cls(*monitor.unique_id(), monitor.current_mode_id)

    def __str__(self):
        return super().__str__() + ' ' + self.mode_id


@dataclasses.dataclass
class Display(DataClassHelper):
    transform_values: typing.ClassVar = [('up', 2, 6), ('down', 0, 4), ('left', 3, 7), ('right', 1, 5)]

    x: int
    y: int
    scale: float
    transform: int
    is_primary: bool
    on_monitors: list[str]

    def _set_transform(self, set_name, set_flipped):
        for name, normal, flipped in self.transform_values:
            if name == set_name:
                self.transform = flipped if set_flipped else normal
                return False
        return True

    @property
    def rotate(self):
        for name, normal, flipped in self.transform_values:
            if self.transform in (normal, flipped):
                return name
        raise ValueError(f'{self.transform} is invalid')

    @rotate.setter
    def rotate(self, value):
        if self._set_transform(value, self.flip):
            raise ValueError(f'{value} is invalid')

    @property
    def flip(self):
        for name, normal, flipped in self.transform_values:
            if self.transform == normal:
                return False
            elif self.transform == flipped:
                return True
        raise ValueError(f'{self.transform} is invalid')

    @flip.setter
    def flip(self, value):
        if self._set_transform(self.rotate, value):
            raise ValueError(f'{value} is invalid')

    def get_on_monitors(self, all_monitors):
        return [all_monitors[connector] for connector in self.on_monitors]

    def info(self):
        primary = 'PRIMARY ' if self.is_primary else ''
        flipped = 'FLIPPED ' if self.flip else ''
        return f'{self.x}, {self.y} {primary}{self.rotate} {flipped}scaled {self.scale:.5}'

    def print_listing(self, index, all_monitors):
        print(f'{index}:', self.info(), 'on:')
        for m in self.get_on_monitors(all_monitors):
            print(f' - {m}')

    def __str__(self):
        info = self.info()
        monitors = ', '.join(self.on_monitors)
        return f'{info} on {monitors}'


@dataclasses.dataclass
class SavedDisplay(DataClassHelper):
    display: Display
    monitors: list[SavedMonitor]

    @classmethod
    def from_display(cls, all_monitors, display):
        return cls(display,
            [SavedMonitor.from_monitor(m) for m in display.get_on_monitors(all_monitors)])


class DisplayConfig:
    def __init__(self):
        self.bus = dbus.SessionBus()
        self.dc_name = 'org.gnome.Mutter.DisplayConfig'
        self.dc_obj = self.bus.get_object(self.dc_name, '/org/gnome/Mutter/DisplayConfig')
        self.dc_interfaces = dbus.Interface(self.dc_obj, dbus_interface=self.dc_name)

    def get(self):
        cfg_serial, got_monitors, got_displays, *_ = self.dc_interfaces.GetCurrentState()

        monitors = {}
        for info, got_modes, *_ in got_monitors:
            connector, vendor, product, serial, *_ = info
            modes = {}
            current_mode_id = None
            preferred_mode_id = None
            for mode_id, w, h, refresh, preferred_scale, supported_scales, props, *_ in got_modes:
                modes[mode_id] = Mode(mode_id, w, h, refresh, preferred_scale, supported_scales)
                if get_prop(props, 'is-current', False):
                    current_mode_id = mode_id
                if get_prop(props, 'is-preferred', False):
                    preferred_mode_id = mode_id
            monitors[str(connector)] = Monitor(
                connector, vendor, product, serial, modes, current_mode_id, preferred_mode_id)

        displays = []
        for x, y, scale, transform, is_primary, on_monitors, *_ in got_displays:
            displays.append(Display(
                x, y, scale, transform, is_primary, [connector for connector, *_ in on_monitors]))

        return cfg_serial, monitors, displays

    def set(self, cfg_serial, monitors, displays, permanent=False, dry_run=False):
        apply_displays = []
        for dp in displays:
            apply_on_monitors = []
            for m in dp.get_on_monitors(monitors):
                apply_on_monitors.append([m.connector, m.current_mode_id, {}])
            apply_displays.append([
                dp.x, dp.y, dp.scale, dp.transform, dp.is_primary, apply_on_monitors])
        method = 2 if permanent else 1
        if dry_run:
            method = 0
        self.dc_interfaces.ApplyMonitorsConfig(
            cfg_serial, method, apply_displays, {})


@dataclasses.dataclass
class Config(DataClassHelper):
    displays: dict[str, SavedDisplay] = dataclasses.field(default_factory=dict)


class Desktop:
    def __init__(self):
        self.verbose = False

        config_file_name = 'control-gnome-displays.json'
        self.config_file = Path(__file__).resolve().parent.parent / config_file_name
        self._config = None
        self.original_config = 'null'

        self.dc = DisplayConfig()
        self.cfg_serial = None
        self._monitors = None
        self._monitors_by_uid = None
        self._displays = None
        self._natural_displays = None
        self._displays_by_connector = None
        self.original_display_data = None

    def config_to_json(self):
        current = to_json(self._config)
        return self.original_config != current, current

    def load_config(self):
        if self.config_file.is_file():
            if self.verbose:
                print('Loading existing config from', self.config_file)
            self._config = Config.from_json(self.config_file.read_text())
        else:
            if self.verbose:
                print('New config')
            self._config = Config()
        _, self.original_config = self.config_to_json()

    def config_loaded(self):
        return self._config is not None

    @property
    def config(self):
        if not self.config_loaded():
            self.load_config()
        return self._config

    def save_config(self):
        is_changed, current = self.config_to_json()
        if is_changed:
            if self.verbose:
                print('Saving config to', self.config_file)
            self.config_file.write_text(current)
            self.original_config = current

    def display_data_to_json(self):
        return to_json([
            self._monitors,
            self._natural_displays,
        ])

    def display_data_changed(self):
        return self.display_data_to_json() != self.original_display_data

    def load_display_data(self):
        if self.verbose:
            print('Loading display data')
        self.cfg_serial, self._monitors, self._displays = self.dc.get()

        self._monitors_by_uid = {}
        for m in self._monitors.values():
            uid = m.unique_id()
            assert uid not in self._monitors_by_uid
            self._monitors_by_uid[uid] = m

        self._natural_displays = []
        for dp in self._displays:
            if dp.is_primary:
                self._natural_displays = [dp] + self._natural_displays
            else:
                self._natural_displays.append(dp)

        self._displays_by_connector = {}
        for dp in self._displays:
            for m in dp.on_monitors:
                self._displays_by_connector[m] = dp

        self.original_display_data = self.display_data_to_json()

    def display_data_loaded(self):
        return self.original_display_data is not None

    def requires_display_data(self):
        if not self.display_data_loaded():
            self.load_display_data()
        return self

    @property
    def monitors(self):
        return self.requires_display_data()._monitors

    @property
    def monitors_by_uid(self):
        return self.requires_display_data()._monitors_by_uid

    @property
    def displays(self):
        return self.requires_display_data()._displays

    @property
    def natural_displays(self):
        return self.requires_display_data()._natural_displays

    @property
    def displays_by_connector(self):
        return self.requires_display_data()._displays_by_connector

    def save_display_data(self, permanent=True, dry_run=False):
        if self.verbose:
            if dry_run:
                print('Saving display data (dry_run)')
            else:
                print('Saving display data')
        self.dc.set(self.cfg_serial, self._monitors, self._displays, permanent, dry_run)

    def list(self, displays=None, title='Current'):
        if title is not None:
            header(0, f'{title} Displays')
        for i, display in enumerate(self.natural_displays):
            display.print_listing(i, self.monitors)

    def save_dp(self, dp, name):
        self.config.displays[name] = \
            SavedDisplay.from_display(self.monitors, dp)

    def load_dp(self, dp, name):
        if self.verbose:
            print('Load', name)
        saved_dp = self.config.displays[name]
        for saved_m in saved_dp.monitors:
            try:
                m = self.monitors_by_uid[saved_m.unique_id()]
                if self.verbose:
                    print('Loading', saved_m)
                m.current_mode_id = saved_m.mode_id
            except KeyError:
                print(f'Ignoring {saved_m}, not currently connected')
        dp.replace(saved_dp.display, on_monitors=dp.on_monitors)


class FuncAction(argparse.Action):
    def __init__(self, option_strings, dest, nargs=None, metavar=None, **kw):
        if self.fixed_args is None:
            nargs = len(self.params)
            metavar = tuple([a.upper() for a in self.params])
        else:
            nargs = 0
            metavar = tuple()
        super().__init__(option_strings, dest, nargs=nargs, metavar=metavar, **kw)

    def __call__(self, parser, namespace, values, option_string=None):
        if self.fixed_args is not None:
            values = self.fixed_args
        try:
            result = self.func(*values)
            if self.dest is not argparse.SUPPRESS:
                setattr(namespace, self.dest, result)
        except RuntimeError as e:
            raise argparse.ArgumentError(self, e)


class Cli:
    def __init__(self, desktop):
        self.parser = argparse.ArgumentParser(description='Manage Gnome Displays')
        self.desktop = desktop
        self.dp = None

        self.add_func_arg(self.set_config_file, '--config',
            help='Set config file, should be first option')
        self.add_func_arg(self.set_verbose, '--verbose', help='Verbose logging')
        self.add_func_arg(self.set_display, '--display', '-d',
            help='Set display to modify in following commands')
        for name in [values[0] for values in Display.transform_values]:
            self.add_func_arg(self.set_rotation, f'--{name}', fixed_args=(name,),
                help=f'Rotate display so the bottom is {name} relative to the monitor')
        self.add_func_arg(self.save_dp, '--save', help='Save the display settings under a name')
        self.add_func_arg(self.load_dp, '--load', help='Load the display settings from a name')
        self.parser.add_argument('--dry-run', action='store_true', help='Do not change anything')
        self.parser.add_argument('--permanent', '-p', action='store_true',
            help='Make changes permanent')

    def set_config_file(self, path):
        if self.desktop.config_loaded():
            raise RuntimeError(f'config already used at this point, put --config first')
        self.desktop.config_file = Path(path)

    def set_verbose(self):
        self.desktop.verbose = True

    def set_display(self, index_or_connector):
        if index_or_connector in self.desktop.displays_by_connector:
            self.dp = self.desktop.displays_by_connector[index_or_connector]
        else:
            try:
                self.dp = self.desktop.natural_displays[int(index_or_connector)]
            except:
                raise RuntimeError(f'{repr(index_or_connector)} is not a valid display index or connector')

    def requires_display(self):
        if self.dp is None:
            raise RuntimeError('--display required')
        return self.dp

    def set_rotation(self, name):
        self.requires_display().rotate = name

    def save_dp(self, name):
        self.desktop.save_dp(self.requires_display(), name)

    def load_dp(self, name):
        self.desktop.load_dp(self.requires_display(), name)

    def add_func_arg(self, func, *args, dest=None, fixed_args=None, **kw):
        sig = signature(func)
        params = func.__code__.co_varnames
        if ismethod(func):
            params = params[1:]
        if sig.return_annotation is sig.empty and dest is None:
            dest = argparse.SUPPRESS
        self.parser.add_argument(*args, dest=dest,
            action=type(f'{func.__name__}Action', (FuncAction,), {
                'func': func,
                'params': params,
                'fixed_args': fixed_args,
            }),
            **kw)

    def parse(self):
        return self.parser.parse_args()


if __name__ == '__main__':
    desktop = Desktop()

    cli = Cli(desktop)
    args = cli.parse()

    desktop.list('Current')

    if desktop.display_data_changed():
        desktop.list(title='Changed')
        desktop.save_display_data(args.permanent, args.dry_run)
    else:
        print('Unchanged')

    desktop.save_config()
