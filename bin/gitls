#!/usr/bin/env python3

import sys
import subprocess
import argparse
from datetime import datetime, UTC
from pathlib import Path


min_datetime = datetime.min.replace(tzinfo=UTC)


def startswith_strip(string, prefix):
    if string.startswith(prefix):
        return True, string[len(prefix):]
    return False, string


def esc(*codes):
    colors = {
        'black': 30,
        'red': 31,
        'green': 32,
        'yellow': 33,
        'blue': 34,
        'magenta': 35,
        'cyan': 36,
        'white': 37,
        'default': 39,
    }
    others = {
        'reset': 0,
        'bold': 1,
    }
    int_values = []
    for code in codes:
        int_value = None
        if isinstance(code, str):
            bg, code = startswith_strip(code, 'bg-')
            color_offset = 10 if bg else 0
            if code in colors:
                int_value = colors[code] + color_offset
            elif code in others:
                int_value = others[code]
        elif isinstance(code, int):
            int_value = code
        if int_value is None:
            raise ValueError(f'Invalid escape code: {code}')
        int_values.append(int_value)
    return '\x1b[' + ';'.join([str(c) for c in int_values]) + 'm'


def info(string):
    return esc('blue') + string + esc('reset')


def error(string):
    return esc('red') + string + esc('reset')


class Repo:
    default_branch_cache = {}

    def __init__(self, path):
        self.path = path

    def __bool__(self):
        return True

    def git_cmd(self, *args):
        return ['git', '-P', '-C', str(self.path), *args]

    def check_exit_status(self, cmd, exit_status):
        if exit_status:
            cmdstr = ' '.join(cmd)
            raise RuntimeError(f'"{cmdstr}" exited with status {exit_status}')

    def git(self, *args):
        cmd = self.git_cmd(*args)
        result = subprocess.run(cmd, capture_output=True)
        stderr = result.stderr.decode().strip()
        if stderr:
            cmdstr = ' '.join(cmd)
            print(error(f'ERROR: command "{cmdstr}" stderr:\n{stderr}'), file=sys.stderr)
        self.check_exit_status(cmd, result.returncode)
        output = result.stdout.decode().strip()
        if len(output):
            return output.split('\n')
        else:
            return []

    def latest_commit(self):
        try:
            return datetime.fromisoformat(self.git('show', '-s', '--format=%ci', 'HEAD')[0])
        except Exception:
            return min_datetime

    def upstream(self):
        # Get upstream remote
        remotes = self.git('remote')
        if not remotes:
            print(f'{self.path} has no remotes')
            return
        upstream = None
        for check in ('upstream', 'origin'):
            if check in remotes:
                upstream = check
                break
        if upstream is None:
            raise RuntimeError(
                'Could not determine upstream remote from: ' + ', '.join(remotes))
        return upstream

    def default_branch(self, upstream):
        url = self.git('config', '--get', f'remote.{upstream}.url')[0]
        default_branch = None
        if url in self.default_branch_cache:
            default_branch = self.default_branch_cache[url]
        else:
            # TODO: Broken?
            # TODO: Option to force getting default branch from remote
            # try:
            #     default_branch = self.git(
            #         'symbolic-ref', f'refs/remotes/{upstream}/HEAD', '--short')[0]
            #     default_branch = startswith_strip(f'{upstream}/')[1]
            # except Exception:
            #     pass
            if default_branch is None:
                lookfor = 'HEAD branch: '
                for line in self.git('remote', 'show', upstream):
                    is_branch, line = startswith_strip(line.strip(), 'HEAD branch: ')
                    if is_branch:
                        default_branch = line
                        break
            self.default_branch_cache[url] = default_branch
        if default_branch is None:
            raise RuntimeError('Could not determine main branch')
        return default_branch

    def fetch(self):
        try:
            print('Fetch', self.path)
            upstream = self.upstream()
            default_branch = self.default_branch(upstream)
            cmd = self.git_cmd('fetch', upstream, default_branch)
            self.check_exit_status(cmd, subprocess.call(cmd))
        except RuntimeError as e:
            print(error(f'ERROR: {self.path}: {e}'), file=sys.stderr)

    def unmerged(self):
        try:
            upstream = self.upstream()
            default_branch = self.default_branch(upstream)
            output = [line[2:] for line in
                self.git('branch', '--no-merged', f'{upstream}/{default_branch}')]
            count = len(output)
            if count:
                return info(f'{count} unmerged')
        except RuntimeError as e:
            print(error(f'ERROR: {self.path}: {e}'), file=sys.stderr)

    def branch(self):
        try:
            output = self.git('rev-parse', '--abbrev-ref', 'HEAD')
        except RuntimeError as e:
            return error(str(e))
        return 'on ' + esc('green') + output[0] + esc('reset')

    def stashed(self):
        try:
            output = self.git('stash', 'list')
        except RuntimeError as e:
            return error(str(e))
        count = len(output)
        if count:
            return info(f'{count} stashed')

    # def git_unpushed(path):
    #     failed, output = git(path,
    #         'log', '--branches', '--not', '--remotes', '--no-walk', '--decorate', '--oneline')
    #     if failed:
    #         return failed
    #     print(path, output)
    #     return ''


def is_git_repo(path):
    return (path / '.git').is_dir()


def walk_dir(path):
    return path.is_dir() and (not (path.name.startswith('.') and path.name != '.'))


class Tree:
    def __init__(self, path, limit, nested_repos, depth=0):
        assert path.is_dir()
        self.path = path
        self.depth = depth
        self.children = []
        self.repo_count = 0
        self.repo = None
        self.latest_commit = min_datetime

        if is_git_repo(path):
            self.repo = Repo(path)
            self.latest_commit = self.repo.latest_commit()
            self.repo_count += 1

        if depth < limit and walk_dir(path) and (nested_repos or not self.repo):
            for child_path in path.iterdir():
                if walk_dir(child_path):
                    child = Tree(child_path, limit, nested_repos, depth + 1)
                    if child:
                        self.repo_count += child.repo_count
                        self.children.append(child)
                        self.latest_commit = max(child.latest_commit, self.latest_commit)
            # Show ones with newer commits first
            self.children.sort(reverse=True)

    def __bool__(self):
        return self.repo_count > 0

    def __lt__(self, other):
        return self.latest_commit < other.latest_commit

    def __iter__(self):
        return iter(self.children)


def fetch_repos(tree):
    if tree.repo:
        tree.repo.fetch()
    for child in tree:
        fetch_repos(child)


def print_tree(tree):
    if tree.depth == 0 and not tree:
        print('N/A')
        return

    if tree.repo:
        display = esc('bold') + f'{tree.path}/ ' + esc('reset')
        display += tree.latest_commit.date().isoformat() + ' '
        display += ', '.join([s for s in [
            tree.repo.branch(),
            tree.repo.stashed(),
            tree.repo.unmerged(),
            # git_unpushed,
        ] if s])
    else:
        display = tree.path.name
        if not display:
            display = '.'
        display += '/'
    print(tree.depth * '  ' + '-', display)
    for child_tree in tree:
        print_tree(child_tree)


def dir_path(path):
    path = Path(path)
    if not path.is_dir():
        raise ValueError(f'{path} is not a directory!')
    return path


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('path', type=dir_path, nargs='?', default='.')
    # parser.add_argument('--all', '-a', action='store_true')
    parser.add_argument('--depth', '-d', type=int, default=2)
    parser.add_argument('--nested-repos', action='store_true')
    parser.add_argument('--fetch', action='store_true')
    args = parser.parse_args()
    tree = Tree(args.path, args.depth, args.nested_repos)
    if args.fetch:
        fetch_repos(tree)
    print_tree(tree)
